// Generated by CoffeeScript 1.4.0
(function() {
//  "use strict";
  var ScriptLoader, exports, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  var exports = (_ref = window.script) != null ? _ref : window.script = {};

  ScriptLoader = (function() {

    function ScriptLoader() {
      this._sendSourceCode = __bind(this._sendSourceCode, this);
      this._scripts = {};
      addEventListener('message', this._sendSourceCode);
    }

    ScriptLoader.prototype._sendSourceCode = function(e) {
      var script;
      script = window.script.Script.getScriptFromFrame(this._scripts, e.source);
      if (script && e.data.type === 'onload') {
        script.postMessage({
          type: 'source_code',
          sourceCode: script.sourceCode
        });
        return delete this._scripts[script.id];
      }
    };

    ScriptLoader.prototype.loadPrepackagedScripts = function(callback) {
      var sourceCode, _i, _len, _ref1, _results;
      _ref1 = window.script.prepackagedScripts;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        sourceCode = _ref1[_i];
        _results.push(callback(this._createScript(sourceCode)));
      }
      return _results;
    };

    ScriptLoader.prototype.loadScriptsFromStorage = function(scripts, callback) {
      var script, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = scripts.length; _i < _len; _i++) {
        script = scripts[_i];
        _results.push(callback(this._createScript(script.sourceCode)));
      }
      return _results;
    };

    ScriptLoader.prototype.createScriptFromFileSystem = function(callback) {
      var _this = this;
      return loadFromFileSystem(function(sourceCode) {
        try {
          return callback(_this._createScript(sourceCode));
        } catch (error) {
          return console.error('failed to eval:', error.toString());
        }
      });
    };

    /*
       * @param {string} sourceCode The raw JavaScript source code of the script.
       * @return {Script} Returns a handle to the script.
    */


    ScriptLoader.prototype._createScript = function(sourceCode) {
      var frame, script;
      frame = this._createIframe();
      script = new window.script.Script(sourceCode, frame);
      this._scripts[script.id] = script;
      return script;
    };

    ScriptLoader.prototype._createIframe = function() {
      var iframe;
      iframe = document.createElement('iframe');
      iframe.src = 'script_frame.html';
      iframe.style.display = 'none';
      document.body.appendChild(iframe);
      return iframe.contentWindow;
    };

    /*
       * Removes the iFrame in which the script is running from the DOM.
       * @param {Script} script
    */


    ScriptLoader.prototype.unloadScript = function(script) {
      document.body.removeChild(script.frame);
      return delete script.frame;
    };

    return ScriptLoader;

  })();

  exports.loader = new ScriptLoader();

}).call(this);
