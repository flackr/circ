// Generated by CoffeeScript 1.4.0
(function() {
//  "use strict";
  var Script, exports, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  var exports = (_ref = window.script) != null ? _ref : window.script = {};

  Script = (function() {

    function Script(sourceCode, frame) {
      this.sourceCode = sourceCode;
      this.frame = frame;
      this.id = Script.getUniqueID();
      this._messagesToHandle = [];
      this._name = "script" + (this.id + 1);
    }

    Script.prototype.postMessage = function(msg) {
      return this.frame.postMessage(msg, '*');
    };

    Script.prototype.shouldHandle = function(event) {
      var _ref1;
      return _ref1 = event.hook, __indexOf.call(this._messagesToHandle, _ref1) >= 0;
    };

    /*
       * Begin handling events of the given type and name.
       * @param {string} type The event type (command, message or server)
       * @param {string} name The name of the event (e.g. kick, NICK, privmsg, etc)
    */


    Script.prototype.beginHandlingType = function(type, name) {
      return this._messagesToHandle.push(type + ' ' + name);
    };

    Script.getScriptFromFrame = function(scripts, frame) {
      var id, script;
      for (id in scripts) {
        script = scripts[id];
        if (script.frame === frame) {
          return script;
        }
      }
      return void 0;
    };

    Script.scriptCount = 0;

    Script.getUniqueID = function() {
      return this.scriptCount++;
    };

    Script.prototype.setName = function(_name) {
      this._name = _name;
    };

    Script.prototype.getName = function() {
      return this._name;
    };

    return Script;

  })();

  exports.Script = Script;

}).call(this);
