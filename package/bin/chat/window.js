// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";
  var Window, exports, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  var exports = (_ref = window.chat) != null ? _ref : window.chat = {};

  /*
   * A window for a specific IRC channel.
  */


  Window = (function(_super) {

    __extends(Window, _super);

    function Window(server, opt_channel) {
      this._onBlur = __bind(this._onBlur, this);

      this._onFocus = __bind(this._onFocus, this);
      Window.__super__.constructor.apply(this, arguments);
      this.name = server + (opt_channel ? " " + opt_channel : '');
      this.messageRenderer = new chat.window.MessageRenderer(this);
      this._addUI();
      this.notifications = new chat.NotificationGroup(opt_channel);
      this._isVisible = false;
      this._isFocused = false;
      this._height = 0;
      $(window).focus(this._onFocus);
      $(window).blur(this._onBlur);
    }

    Window.prototype.getContext = function() {
      var _ref1, _ref2;
      if ((_ref1 = this._context) == null) {
        this._context = new Context((_ref2 = this.conn) != null ? _ref2.name : void 0, this.target);
      }
      return this._context;
    };

    Window.prototype._onFocus = function() {
      if (!this._isVisible) {
        return;
      }
      this._isFocused = true;
      this.notifications.clear();
      return this.messageRenderer.onFocus();
    };

    Window.prototype._onBlur = function() {
      return this._isFocused = false;
    };

    Window.prototype.isFocused = function() {
      return this._isFocused && this._isVisible;
    };

    Window.prototype._addUI = function() {
      this._addMessageUI();
      this._addNickUI();
      return this.$roomsAndNicks = $('#rooms-and-nicks');
    };

    Window.prototype._addMessageUI = function() {
      this.$messagesContainer = (new chat.Scrollable($('#messages-container'))).node();
      return this.$messages = $('#templates .messages').clone();
    };

    Window.prototype._addNickUI = function() {
      this.$nicksContainer = $('#nicks-container');
      this.$nicks = $('#templates .nicks').clone();
      return this.nicks = new chat.NickList(this.$nicks);
    };

    /*
       * Sets the window's channel.
       * @param {string} target
    */


    Window.prototype.setTarget = function(target) {
      this.target = target;
      if (this.isPrivate()) {
        return;
      }
      return this.$roomsAndNicks.removeClass('no-nicks');
    };

    Window.prototype.isServerWindow = function() {
      return !this.target;
    };

    Window.prototype.equals = function(win) {
      return this.name === win.name;
    };

    /*
       * Marks the window as private.
       * Private windows are used for direct messages from /msg.
    */


    Window.prototype.makePrivate = function() {
      return this._private = true;
    };

    Window.prototype.isPrivate = function() {
      return this._private != null;
    };

    Window.prototype.detach = function() {
      this.$roomsAndNicks.addClass('no-nicks');
      this.$messages.detach();
      this.$nicks.detach();
      return this._isVisible = false;
    };

    Window.prototype.remove = function() {
      this.detach();
      this.$messages.remove();
      return this.$nicks.remove();
    };

    Window.prototype.attach = function() {
      this._isVisible = true;
      this._onFocus();
      if (this.target && !this.isPrivate()) {
        this.$roomsAndNicks.removeClass('no-nicks');
      }
      this.$messagesContainer.append(this.$messages);
      this.$nicksContainer.append(this.$nicks);
      return this.$messagesContainer.restoreScrollPosition();
    };

    Window.prototype.message = function() {
      var from, msg, style, _ref1;
      from = arguments[0], msg = arguments[1], style = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return (_ref1 = this.messageRenderer).message.apply(_ref1, [from, msg].concat(__slice.call(style)));
    };

    /*
       * Display a raw html to the user.
       * This is useful for scripts to embed images or video.
    */


    Window.prototype.rawMessage = function() {
      var from, node, style;
      from = arguments[0], node = arguments[1], style = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return this.messageRenderer.rawMessage(from, node, style.join(' '));
    };

    /*
       * Append raw html to the message list.
       * This is useful for adding a large number of messages quickly, such as
       * loading chat history.
    */


    Window.prototype.rawHTML = function(html) {
      this.$messages.html(this.$messages.html() + html);
      return this.$messagesContainer.restoreScrollPosition();
    };

    Window.prototype.clear = function() {
      return this.$messages.html('');
    };

    return Window;

  })(EventEmitter);

  exports.Window = Window;

}).call(this);
