// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";
  var ChromeSocket, exports, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  var exports = (_ref = window.net) != null ? _ref : window.net = {};

  /*
   * A socket connected to an IRC server. Uses chrome.socket.
  */


  ChromeSocket = (function(_super) {

    __extends(ChromeSocket, _super);

    function ChromeSocket() {
      this._onRead = __bind(this._onRead, this);

      this._onConnect = __bind(this._onConnect, this);
      return ChromeSocket.__super__.constructor.apply(this, arguments);
    }

    ChromeSocket.prototype.connect = function(addr, port) {
      var _this = this;
      this._active();
      return chrome.socket.create('tcp', {}, function(si) {
        _this.socketId = si.socketId;
        if (_this.socketId > 0) {
          registerSocketConnection(si.socketId);
          return chrome.socket.connect(_this.socketId, addr, port, _this._onConnect);
        } else {
          return _this.emit('error', "couldn't create socket");
        }
      });
    };

    ChromeSocket.prototype._onConnect = function(rc) {
      if (rc < 0) {
        return this.emit('error', "couldn't connect to socket: " +
          chrome.runtime.lastError.message + " (error " + (-rc) + ")");
      } else {
        this.emit('connect');
        return chrome.socket.read(this.socketId, this._onRead);
      }
    };

    ChromeSocket.prototype._onRead = function(readInfo) {
      if (readInfo.resultCode === -1) {
        console.error("Bad assumption: got -1 in _onRead");
      }
      this._active();
      if (readInfo.resultCode < 0) {
        this.emit('error', "read from socket: " +
          chrome.runtime.lastError.message + " (error " + (-readInfo.resultCode) + ")");
      } else if (readInfo.resultCode === 0) {
        this.emit('end');
        this.close();
      }
      if (readInfo.data.byteLength) {
        this.emit('data', readInfo.data);
        return chrome.socket.read(this.socketId, this._onRead);
      }
    };

    ChromeSocket.prototype.write = function(data) {
      var _this = this;
      this._active();
      return chrome.socket.write(this.socketId, data, function(writeInfo) {
        if (writeInfo.resultCode < 0) {
          console.error("SOCKET ERROR on write: ",
            chrome.runtime.lastError.message + " (error " + (-writeInfo.resultCode) + ")");
        }
        if (writeInfo.bytesWritten === data.byteLength) {
          return _this.emit('drain');
        } else {
          if (writeInfo.bytesWritten >= 0) {
            console.error("Can't handle non-complete writes: wrote " +
              writeInfo.bytesWritten + " expected " + data.byteLength);
          }
          return _this.emit('error',
              "Invalid write on socket, code: " + writeInfo.bytesWritten);
        }
      });
    };

    ChromeSocket.prototype.close = function() {
      if (this.socketId != null) {
        chrome.socket.disconnect(this.socketId);
        chrome.socket.destroy(this.socketId);
        registerSocketConnection(this.socketId, true);
      }
      return this.emit('close');
    };

    return ChromeSocket;

  })(net.AbstractTCPSocket);

  exports.ChromeSocket = ChromeSocket;

}).call(this);
