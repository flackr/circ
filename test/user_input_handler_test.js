// Generated by CoffeeScript 1.4.0
(function() {

  describe('A user input handler', function() {
    var altHeld, commands, context, ctrl, ctrlHeld, cursor, handler, input, inputKeyDown, keyDown, names, numlock, onVal, space, tab, type, val, window, windowKeyDown,
      _this = this;
    handler = altHeld = ctrlHeld = val = inputKeyDown = windowKeyDown = void 0;
    onVal = jasmine.createSpy('onVal');
    keyDown = function(code) {
      var e;
      e = {
        which: code,
        altKey: altHeld,
        ctrlKey: ctrlHeld,
        isDefaultPrevented: function() {},
        preventDefault: function() {}
      };
      windowKeyDown(e);
      return inputKeyDown(e);
    };
    type = function(text) {
      val = text;
      return keyDown(13);
    };
    tab = function() {
      return keyDown(9);
    };
    ctrl = function() {
      return keyDown(17);
    };
    numlock = function() {
      return keyDown(144);
    };
    space = function() {
      keyDown(32);
      return val += ' ';
    };
    cursor = function(pos) {
      return handler._getCursorPosition = function() {
        return pos;
      };
    };
    input = {
      keydown: function(cb) {
        return inputKeyDown = cb;
      },
      focus: function() {},
      val: function(text) {
        if (arguments.length === 0) {
          return val;
        }
        val = text;
        return onVal(text);
      }
    };
    window = {
      keydown: function(cb) {
        return windowKeyDown = cb;
      }
    };
    names = {
      bill: 'bill',
      sally: 'sally',
      bob: 'bob',
      joe: 'Joe'
    };
    commands = {
      help: 'help',
      join: 'join',
      nick: 'nick'
    };
    context = {
      currentWindow: {
        getContext: function() {
          return {
            channel: '#bash',
            server: 'freenode.net'
          };
        },
        target: '#bash',
        conn: {
          name: 'freenode.net',
          irc: {
            channels: {}
          }
        }
      },
      on: function() {},
      userCommands: {
        getCommands: function() {
          return commands;
        }
      }
    };
    beforeEach(function() {
      handler = new UserInputHandler(input, window);
      handler.setKeyboardShortcuts(new KeyboardShortcutMap);
      handler._setCursorPosition = function() {};
      context.currentWindow.conn.irc.channels['#bash'] = {
        names: names
      };
      handler.setContext(context);
      spyOn(handler, 'emit');
      altHeld = false;
      return onVal.reset();
    });
    it("switches to the given window on 'ctrl-[1-9]'", function() {
      var event;
      ctrlHeld = true;
      keyDown(49);
      event = handler.emit.mostRecentCall.args[1];
      expect(event.type).toBe('command');
      expect(event.name).toBe('win');
      expect(event.args).toEqual([1]);
      keyDown(57);
      event = handler.emit.mostRecentCall.args[1];
      expect(event.type).toBe('command');
      expect(event.name).toBe('win');
      return expect(event.args).toEqual([9]);
    });
    it("doesn't switch windows when ctrl isn't held", function() {
      keyDown(48);
      altHeld = true;
      keyDown(57);
      return expect(handler.emit).not.toHaveBeenCalled();
    });
    it("sends a say command when text is entered", function() {
      var e;
      type('hello world!');
      expect(handler.emit).toHaveBeenCalledWith('command', jasmine.any(Object));
      e = handler.emit.mostRecentCall.args[1];
      expect(e.type).toBe('command');
      expect(e.name).toBe('say');
      expect(e.context).toEqual({
        server: 'freenode.net',
        channel: '#bash'
      });
      return expect(e.args).toEqual('hello world!'.split(' '));
    });
    it("sends the given command when a command is entered", function() {
      var e;
      type('/kick sugarman for spamming /dance');
      expect(handler.emit).toHaveBeenCalledWith('command', jasmine.any(Object));
      e = handler.emit.mostRecentCall.args[1];
      expect(e.type).toBe('command');
      expect(e.name).toBe('kick');
      expect(e.context).toEqual({
        server: 'freenode.net',
        channel: '#bash'
      });
      return expect(e.args).toEqual('sugarman for spamming /dance'.split(' '));
    });
    describe('auto-complete', function() {
      it("completes the current word and adds a colon + space after if it starts the phrase", function() {
        val = 'b';
        cursor(1);
        tab();
        return expect(onVal.mostRecentCall.args[0]).toBe('bill: ');
      });
      it("completes the current word when the cursor is at the begining of the input", function() {
        val = 'b';
        cursor(0);
        tab();
        return expect(onVal.mostRecentCall.args[0]).toBe('bill: ');
      });
      it("completes the current word and adds a space after if it doesn't start the phrase", function() {
        val = ' b';
        cursor(2);
        tab();
        return expect(onVal.mostRecentCall.args[0]).toBe(' bill ');
      });
      it("completes the current word when the phrase ends with a space", function() {
        val = 'b ';
        cursor(1);
        tab();
        return expect(onVal.mostRecentCall.args[0]).toBe('bill:  ');
      });
      it("completes the current word when the cursor is in the middle of a word", function() {
        val = 'sis cool';
        cursor(1);
        tab();
        return expect(onVal.mostRecentCall.args[0]).toBe('sally: is cool');
      });
      it("completes the current word, even when the cursor moves", function() {
        val = 'well, s is great';
        cursor(7);
        tab();
        return expect(onVal.mostRecentCall.args[0]).toBe('well, sally  is great');
      });
      it("completes the current word, even when there is space between the cursor and the word", function() {
        val = 'well, sal         is great';
        cursor(15);
        tab();
        return expect(onVal.mostRecentCall.args[0]).toBe('well, sally          is great');
      });
      it("goes to next completion on tab", function() {
        val = 'b';
        cursor(0);
        tab();
        expect(onVal.mostRecentCall.args[0]).toBe('bill: ');
        tab();
        expect(onVal.mostRecentCall.args[0]).toBe('bob: ');
        tab();
        return expect(onVal.mostRecentCall.args[0]).toBe('bill: ');
      });
      it("stops cycling possible completions only when input is entered", function() {
        val = 'b';
        cursor(0);
        tab();
        expect(onVal.mostRecentCall.args[0]).toBe('bill: ');
        ctrl();
        numlock();
        tab();
        cursor(6);
        expect(onVal.mostRecentCall.args[0]).toBe('bob: ');
        space();
        tab();
        cursor(5);
        return expect(onVal.mostRecentCall.args[0]).toBe('bob:  ');
      });
      it("does nothing when no completion candidates match", function() {
        val = 'zack';
        cursor(0);
        tab();
        return expect(onVal.mostRecentCall.args[0]).toBe('zack');
      });
      it("adds ': ' even when the the full nick is typed out when tab is pressed", function() {
        val = 'bill';
        cursor(4);
        tab();
        return expect(onVal.mostRecentCall.args[0]).toBe('bill: ');
      });
      return it("completes commands when the first character is a '/'", function() {
        val = '/h';
        cursor(2);
        tab();
        return expect(onVal.mostRecentCall.args[0]).toBe('/help ');
      });
    });
    return describe('input stack', function() {
      var downArrow, upArrow;
      upArrow = function() {
        return keyDown(38);
      };
      downArrow = function() {
        return keyDown(40);
      };
      it("uses the up arrow to show previous commands", function() {
        type('hi');
        type('bye');
        upArrow();
        expect(onVal.mostRecentCall.args[0]).toBe('bye');
        upArrow();
        return expect(onVal.mostRecentCall.args[0]).toBe('hi');
      });
      it("does nothing when the up arrow is pressed and there is no more previous command", function() {
        upArrow();
        expect(onVal).not.toHaveBeenCalled();
        val = 'current text';
        upArrow();
        expect(onVal).not.toHaveBeenCalled();
        type('hi');
        upArrow();
        onVal.reset();
        upArrow();
        upArrow();
        return expect(onVal).not.toHaveBeenCalled();
      });
      it("uses the down arrow to move back toward current commands", function() {
        type('hi');
        type('bye');
        upArrow();
        upArrow();
        downArrow();
        return expect(onVal.mostRecentCall.args[0]).toBe('bye');
      });
      it("displays the current input value as most current previous command", function() {
        type('hi');
        upArrow();
        downArrow();
        expect(onVal.mostRecentCall.args[0]).toBe('');
        type('hi');
        val = 'current text';
        upArrow();
        downArrow();
        return expect(onVal.mostRecentCall.args[0]).toBe('current text');
      });
      return it("does nothing when the down arrow is pressed but there is no more current command", function() {
        downArrow();
        expect(onVal).not.toHaveBeenCalled();
        val = 'current text';
        downArrow();
        expect(onVal).not.toHaveBeenCalled();
        type('hi');
        upArrow();
        downArrow();
        onVal.reset();
        downArrow();
        downArrow();
        return expect(onVal).not.toHaveBeenCalled();
      });
    });
  });

}).call(this);
