// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  describe('A user command', function() {
    var eatCommand, kickCommand, modeCommand, sayCommand, serverCommand, win;
    win = sayCommand = eatCommand = kickCommand = serverCommand = modeCommand = void 0;
    var onRun = jasmine.createSpy('onRun');
    var client = {
      determineWindow: function() {
        return win;
      }
    };
    var eatCommandDescription = {
      description: 'eats cake',
      params: ['numCakes'],
      validateArgs: function() {
        return this.numCakes = parseInt(this.numCakes);
      },
      run: function() {
        return onRun(this.numCakes);
      }
    };
    var modeCommandDescription = {
      description: 'sets the mode for a user (by default, yourself)',
      params: ['opt_nick', 'mode'],
      requires: ['connection', 'channel', 'connected'],
      validateArgs: function() {
        var _ref;
        return (_ref = this.nick) != null ? _ref : this.nick = this.conn.irc.nick;
      },
      run: function() {
        return onRun(this.nick, this.mode);
      }
    };
    var sayCommandDescription = {
      description: 'outputs text to the screen',
      params: ['text...'],
      run: function() {
        return onRun(this.text);
      }
    };
    var kickCommandDescription = {
      description: 'kicks a user from the current channel',
      params: ['nick', 'opt_reason...'],
      run: function() {
        return onRun(this.nick, this.reason);
      }
    };
    var serverCommandDescription = {
      description: 'joins a server',
      params: ['opt_server', 'opt_port', 'opt_password'],
      run: function() {
        return onRun(this.server, this.port, this.password);
      }
    };
    var getWindow = function() {
      var ircMock = new window.irc.IRC;
      ircMock.state = 'connected';
      ircMock.nick = 'ournick';
      return {
        target: '#bash',
        conn: {
          name: 'freenode.net',
          irc: ircMock
        }
      };
    };
    beforeEach(function() {
      mocks.navigator.useMock();
      onRun.reset();
      win = getWindow();
      eatCommand = new chat.UserCommand('eat', eatCommandDescription);
      sayCommand = new chat.UserCommand('say', sayCommandDescription);
      kickCommand = new chat.UserCommand('kick', kickCommandDescription);
      serverCommand = new chat.UserCommand('server', serverCommandDescription);
      modeCommand = new chat.UserCommand('mode', modeCommandDescription);
      modeCommand.setChat(client);
      return modeCommand.setContext({});
    });
    it('parses arguments based on the params field', function() {
      eatCommand.setArgs('8');
      eatCommand.run();
      return expect(onRun).toHaveBeenCalledWith(8);
    });
    it('can check if the given arguments are valid', function() {
      expect(eatCommand._hasValidArgs).toBe(false);
      eatCommand.setArgs('4');
      expect(eatCommand._hasValidArgs).toBe(true);
      eatCommand.setArgs('donkey');
      expect(eatCommand._hasValidArgs).toBe(false);
      eatCommand.setArgs('4', '5');
      expect(eatCommand._hasValidArgs).toBe(false);
      eatCommand.setArgs();
      return expect(eatCommand._hasValidArgs).toBe(false);
    });
    it('can require certain conditions to be met', function() {
      win.conn.irc.state = 'disconnected';
      expect(modeCommand.canRun()).toBe(false);
      win.conn.irc.state = 'connected';
      expect(modeCommand.canRun()).toBe(true);
      win.target = void 0;
      modeCommand.setChat(client);
      modeCommand.setContext({});
      return expect(modeCommand.canRun()).toBe(false);
    });
    it('supports optional arguments', function() {
      modeCommand.setArgs('othernick', '+o');
      expect(modeCommand._hasValidArgs).toBe(true);
      modeCommand.setArgs('+o');
      expect(modeCommand._hasValidArgs).toBe(true);
      modeCommand.setArgs();
      expect(modeCommand._hasValidArgs).toBe(false);
      modeCommand.setArgs('othernick', '+o', '#channel');
      return expect(modeCommand._hasValidArgs).toBe(false);
    });
    it('supports variable number of arguments', function() {
      expect(sayCommand.getHelp()).toBe('SAY <text>, outputs text to the screen.');
      sayCommand.setArgs('hi there');
      expect(sayCommand._hasValidArgs).toBe(true);
      sayCommand.run();
      expect(onRun).toHaveBeenCalledWith('hi there');
      sayCommand.setArgs('hey', 'guy');
      expect(sayCommand._hasValidArgs).toBe(true);
      sayCommand.run();
      return expect(onRun).toHaveBeenCalledWith('hey guy');
    });
    it('supports a mix of normal, optional and variable arguments', function() {
      kickCommand.setArgs('somenick');
      kickCommand.run();
      expect(onRun).toHaveBeenCalledWith('somenick', void 0);
      kickCommand.setArgs('somenick', 'because', 'he', 'was', 'lame');
      kickCommand.run();
      expect(onRun).toHaveBeenCalledWith('somenick', 'because he was lame');
      expect(kickCommand.getHelp()).toBe('KICK <nick> [reason], kicks a user ' + 'from the current channel.');
      kickCommand.setArgs();
      return expect(kickCommand._hasValidArgs).toBe(false);
    });
    it('can have an optional arg before a normal arg', function() {
      modeCommand = new chat.UserCommand('mode', {
        params: ['opt_nick', 'mode']
      });
      modeCommand.setArgs();
      return expect(modeCommand._hasValidArgs).toBe(false);
    });
    it('provides a help message', function() {
      expect(eatCommand.getHelp()).toBe('EAT <numCakes>, eats cake.');
      return expect(modeCommand.getHelp()).toBe('MODE [nick] <mode>, ' + 'sets the mode for a user (by default, yourself).');
    });
    it("can't run of run isn't defined", function() {
      var danceDescription = {
        description: "outputs dancing kirbys on the screen"
      };
      var danceCommand = new chat.UserCommand('dance', danceDescription);
      danceCommand.setChat(client);
      danceCommand.setContext({});
      return expect(danceCommand.canRun()).toBe(false);
    });
    it("can have no params", function() {
      var danceDescription = {
        description: "outputs dancing kirbys on the screen",
        run: function() {
          return onRun('(>^.^)>');
        }
      };
      var danceCommand = new chat.UserCommand('dance', danceDescription);
      expect(danceCommand.getHelp()).toBe("DANCE, outputs dancing kirbys on the screen.");
      danceCommand.setArgs('hi');
      expect(danceCommand._hasValidArgs).toBe(false);
      danceCommand.setArgs();
      expect(danceCommand._hasValidArgs).toBe(true);
      danceCommand.run();
      return expect(onRun).toHaveBeenCalledWith('(>^.^)>');
    });
    it('can have multiple optional params', function() {
      serverCommand.setArgs();
      expect(serverCommand._hasValidArgs).toBe(true);
      serverCommand.setArgs('freenode');
      expect(serverCommand._hasValidArgs).toBe(true);
      serverCommand.run();
      expect(onRun).toHaveBeenCalledWith('freenode', void 0, void 0);
      serverCommand.setArgs('freenode', '6667');
      expect(serverCommand._hasValidArgs).toBe(true);
      serverCommand.run();
      expect(onRun).toHaveBeenCalledWith('freenode', '6667', void 0);
      serverCommand.setArgs('freenode', '6667', 'password');
      expect(serverCommand._hasValidArgs).toBe(true);
      serverCommand.run();
      expect(onRun).toHaveBeenCalledWith('freenode', '6667', 'password');
      serverCommand.setArgs('freenode', '6667', void 0, 'extraparam');
      return expect(serverCommand._hasValidArgs).toBe(false);
    });
    it('can extend other commands', function() {
      var yellDescription = {
        description: 'outputs text to the screen in all caps',
        validateArgs: function() {
          return this.text = this.text.toUpperCase();
        }
      };
      var yellCommand = new chat.UserCommand('yell', yellDescription);
      yellCommand.describe(sayCommandDescription);
      expect(yellCommand.getHelp()).toBe('YELL <text>, outputs text to the screen in all caps.');
      yellCommand.setArgs('hi', 'bob');
      expect(yellCommand._hasValidArgs).toBe(true);
      yellCommand.run();
      return expect(onRun).toHaveBeenCalledWith('HI BOB');
    });
    it('can manually set usage message', function() {
      var command = new chat.UserCommand('name', {
        usage: 'custom usage'
      });
      return expect(command.getHelp()).toBe('NAME custom usage.');
    });
    it('removes trailing white space', function() {
      modeCommand.setArgs('+o', '', '');
      return expect(modeCommand._hasValidArgs).toBe(true);
    });
    return it('can always run if it has no requirements or params', function() {
      var yellDescription = {
        description: 'outputs text to the screen in all caps',
        run: function() {}
      };
      var yellCommand = new chat.UserCommand('yell', yellDescription);
      yellCommand.setChat(client);
      spyOn(yellCommand, 'run');
      yellCommand.tryToRun({});
      return expect(yellCommand.run).toHaveBeenCalled();
    });
  });

}).call(this);
